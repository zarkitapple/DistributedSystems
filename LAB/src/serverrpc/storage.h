/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _STORAGE_H_RPCGEN
#define _STORAGE_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>
#include "../../lib/LinkedList.h"
#include "../../lib/auxiliary.h"

#ifdef __cplusplus
extern "C" {
#endif


struct connect_arguments {
	char *name;
	char *port;
	char *ip;
};
typedef struct connect_arguments connect_arguments;

struct publish_arguments {
	char *name;
	char *file_name;
	char *file_description;
};
typedef struct publish_arguments publish_arguments;

struct delete_arguments {
	char *name;
	char *file_name;
};
typedef struct delete_arguments delete_arguments;

struct UserServer {
	char *name;
	char *port;
	char *ip;
};
typedef struct UserServer UserServer;

typedef struct {
	u_int UserList_len;
	UserServer *UserList_val;
} UserList;

struct Title {
	char *file_name;
};
typedef struct Title Title;

typedef struct {
	u_int TitleList_len;
	Title *TitleList_val;
} TitleList;

struct list_content_1_argument {
	char *arg1;
	char *arg2;
};
typedef struct list_content_1_argument list_content_1_argument;

void init_server ();

#define STORAGE 1114
#define STORAGEVER 1

#if defined(__STDC__) || defined(__cplusplus)
#define REGISTER_USER_RPC 1
extern  enum clnt_stat register_user_rpc_1(char *, int *, CLIENT *);
extern  bool_t register_user_rpc_1_svc(char *, int *, struct svc_req *);
#define UNREGISTER__USER_RPC 2
extern  enum clnt_stat unregister__user_rpc_1(char *, int *, CLIENT *);
extern  bool_t unregister__user_rpc_1_svc(char *, int *, struct svc_req *);
#define CONNECT_USER_RPC 3
extern  enum clnt_stat connect_user_rpc_1(connect_arguments , int *, CLIENT *);
extern  bool_t connect_user_rpc_1_svc(connect_arguments , int *, struct svc_req *);
#define DISCONNECT_USER_RPC 4
extern  enum clnt_stat disconnect_user_rpc_1(char *, int *, CLIENT *);
extern  bool_t disconnect_user_rpc_1_svc(char *, int *, struct svc_req *);
#define PUBLISH_FILE_RPC 5
extern  enum clnt_stat publish_file_rpc_1(publish_arguments , int *, CLIENT *);
extern  bool_t publish_file_rpc_1_svc(publish_arguments , int *, struct svc_req *);
#define DELETE_FILE_RPC 6
extern  enum clnt_stat delete_file_rpc_1(delete_arguments , int *, CLIENT *);
extern  bool_t delete_file_rpc_1_svc(delete_arguments , int *, struct svc_req *);
#define LIST_USERS 7
extern  enum clnt_stat list_users_1(char *, UserList *, CLIENT *);
extern  bool_t list_users_1_svc(char *, UserList *, struct svc_req *);
#define LIST_CONTENT 8
extern  enum clnt_stat list_content_1(char *, char *, TitleList *, CLIENT *);
extern  bool_t list_content_1_svc(char *, char *, TitleList *, struct svc_req *);
#define IS_USER_REGISTERED 9
extern  enum clnt_stat is_user_registered_1(char *, int *, CLIENT *);
extern  bool_t is_user_registered_1_svc(char *, int *, struct svc_req *);
#define IS_USER_CONNECTED 10
extern  enum clnt_stat is_user_connected_1(char *, int *, CLIENT *);
extern  bool_t is_user_connected_1_svc(char *, int *, struct svc_req *);
extern int storage_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define REGISTER_USER_RPC 1
extern  enum clnt_stat register_user_rpc_1();
extern  bool_t register_user_rpc_1_svc();
#define UNREGISTER__USER_RPC 2
extern  enum clnt_stat unregister__user_rpc_1();
extern  bool_t unregister__user_rpc_1_svc();
#define CONNECT_USER_RPC 3
extern  enum clnt_stat connect_user_rpc_1();
extern  bool_t connect_user_rpc_1_svc();
#define DISCONNECT_USER_RPC 4
extern  enum clnt_stat disconnect_user_rpc_1();
extern  bool_t disconnect_user_rpc_1_svc();
#define PUBLISH_FILE_RPC 5
extern  enum clnt_stat publish_file_rpc_1();
extern  bool_t publish_file_rpc_1_svc();
#define DELETE_FILE_RPC 6
extern  enum clnt_stat delete_file_rpc_1();
extern  bool_t delete_file_rpc_1_svc();
#define LIST_USERS 7
extern  enum clnt_stat list_users_1();
extern  bool_t list_users_1_svc();
#define LIST_CONTENT 8
extern  enum clnt_stat list_content_1();
extern  bool_t list_content_1_svc();
#define IS_USER_REGISTERED 9
extern  enum clnt_stat is_user_registered_1();
extern  bool_t is_user_registered_1_svc();
#define IS_USER_CONNECTED 10
extern  enum clnt_stat is_user_connected_1();
extern  bool_t is_user_connected_1_svc();
extern int storage_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_connect_arguments (XDR *, connect_arguments*);
extern  bool_t xdr_publish_arguments (XDR *, publish_arguments*);
extern  bool_t xdr_delete_arguments (XDR *, delete_arguments*);
extern  bool_t xdr_UserServer (XDR *, UserServer*);
extern  bool_t xdr_UserList (XDR *, UserList*);
extern  bool_t xdr_Title (XDR *, Title*);
extern  bool_t xdr_TitleList (XDR *, TitleList*);
extern  bool_t xdr_list_content_1_argument (XDR *, list_content_1_argument*);

#else /* K&R C */
extern bool_t xdr_connect_arguments ();
extern bool_t xdr_publish_arguments ();
extern bool_t xdr_delete_arguments ();
extern bool_t xdr_UserServer ();
extern bool_t xdr_UserList ();
extern bool_t xdr_Title ();
extern bool_t xdr_TitleList ();
extern bool_t xdr_list_content_1_argument ();
extern bool_t xdr_delete_arguments ();
extern bool_t xdr_UserServer ();
extern bool_t xdr_UserList ();
extern bool_t xdr_Title ();
extern bool_t xdr_TitleList ();
extern bool_t xdr_list_content_1_argument ();
extern bool_t xdr_delete_arguments ();
extern bool_t xdr_UserServer ();
extern bool_t xdr_UserList ();
extern bool_t xdr_Title ();
extern bool_t xdr_TitleList ();
extern bool_t xdr_list_content_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_STORAGE_H_RPCGEN */
